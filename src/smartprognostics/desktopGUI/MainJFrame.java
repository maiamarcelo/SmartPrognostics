package smartprognostics.desktopGUI;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import smartprognostics.Config;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author MarcelodeAlmeidaMaia
 */
public class MainJFrame extends javax.swing.JFrame {

    Config config;

    /**
     * Creates new form NewJFrame
     */
    public MainJFrame() {
        initComponents();
        config = new Config();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuLoadModel = new javax.swing.JMenuItem();
        menuLoadPatientFile = new javax.swing.JMenuItem();
        menuSaveResult = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();
        menuPredict = new javax.swing.JMenu();
        menuPredictRun = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuHelpShow = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1000, 800));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartprognostics/icons/openmodel.png"))); // NOI18N
        jButton1.setToolTipText("Open Model");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setMaximumSize(new java.awt.Dimension(50, 50));
        jButton1.setMinimumSize(new java.awt.Dimension(50, 50));
        jButton1.setPreferredSize(new java.awt.Dimension(50, 50));
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jButton1ComponentResized(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartprognostics/icons/openpatient.png"))); // NOI18N
        jButton2.setToolTipText("Load Patient Data");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setMaximumSize(new java.awt.Dimension(50, 50));
        jButton2.setMinimumSize(new java.awt.Dimension(50, 50));
        jButton2.setPreferredSize(new java.awt.Dimension(50, 50));
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jButton2ComponentResized(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartprognostics/icons/saveresult.png"))); // NOI18N
        jButton3.setToolTipText("Save Result");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setMaximumSize(new java.awt.Dimension(50, 50));
        jButton3.setMinimumSize(new java.awt.Dimension(50, 50));
        jButton3.setPreferredSize(new java.awt.Dimension(50, 50));
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jButton3ComponentResized(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/smartprognostics/icons/predict.png"))); // NOI18N
        jButton4.setToolTipText("Predict");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setMaximumSize(new java.awt.Dimension(50, 50));
        jButton4.setMinimumSize(new java.awt.Dimension(50, 50));
        jButton4.setPreferredSize(new java.awt.Dimension(50, 50));
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jButton4ComponentResized(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jPanel1.add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setViewportView(jTextPane1);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        menuFile.setText("File");

        menuLoadModel.setText("Load Model");
        menuLoadModel.setActionCommand("menuLoadModel");
        menuLoadModel.setName("menuLoadModel"); // NOI18N
        menuLoadModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLoadModelActionPerformed(evt);
            }
        });
        menuFile.add(menuLoadModel);

        menuLoadPatientFile.setText("Load Patient File");
        menuLoadPatientFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLoadPatientFileActionPerformed(evt);
            }
        });
        menuFile.add(menuLoadPatientFile);

        menuSaveResult.setText("Save Result");
        menuSaveResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveResultActionPerformed(evt);
            }
        });
        menuFile.add(menuSaveResult);

        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuFile.add(menuExit);

        jMenuBar1.add(menuFile);

        menuPredict.setText("Predict");

        menuPredictRun.setText("Run");
        menuPredictRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPredictRunActionPerformed(evt);
            }
        });
        menuPredict.add(menuPredictRun);

        jMenuBar1.add(menuPredict);

        menuHelp.setText("Help");
        menuHelp.setName("menuBarHelp"); // NOI18N
        menuHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHelpActionPerformed(evt);
            }
        });

        menuHelpShow.setText("Show Help");
        menuHelpShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHelpShowActionPerformed(evt);
            }
        });
        menuHelp.add(menuHelpShow);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setLocationRelativeTo(null);
    }//GEN-LAST:event_formWindowOpened

    private void menuLoadModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLoadModelActionPerformed
        this.loadModel();
    }//GEN-LAST:event_menuLoadModelActionPerformed

    private void menuLoadPatientFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLoadPatientFileActionPerformed
        this.loadPatientFile();
    }//GEN-LAST:event_menuLoadPatientFileActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        if (config.isResultSaved())
            System.exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private void jButton1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton1ComponentResized
        resizePaletteButton(jButton1);
    }//GEN-LAST:event_jButton1ComponentResized

    private void jButton2ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton2ComponentResized
        resizePaletteButton(jButton2);
    }//GEN-LAST:event_jButton2ComponentResized

    private void jButton3ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton3ComponentResized
        resizePaletteButton(jButton3);
    }//GEN-LAST:event_jButton3ComponentResized

    private void jButton4ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton4ComponentResized
        resizePaletteButton(jButton4);
    }//GEN-LAST:event_jButton4ComponentResized

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadModel();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        loadPatientFile();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.predict();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       this.saveOutput();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void menuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHelpActionPerformed
        this.refreshOutput(help());
    }//GEN-LAST:event_menuHelpActionPerformed

    private void menuHelpShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHelpShowActionPerformed
               this.refreshOutput(help());
    }//GEN-LAST:event_menuHelpShowActionPerformed

    private void menuPredictRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPredictRunActionPerformed
        this.predict();
    }//GEN-LAST:event_menuPredictRunActionPerformed

    private void menuSaveResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveResultActionPerformed
        this.saveOutput();
    }//GEN-LAST:event_menuSaveResultActionPerformed

    private void saveOutput () {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Salvar Arquivo");

        // Open file chooser and wait for user to select a file
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            saveTextPaneToFile(jTextPane1, fileToSave);
        } 
    }
    
    private void saveTextPaneToFile(JTextPane textPane, File file) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(textPane.getText());
            JOptionPane.showMessageDialog(null, "File Saved!");
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error during file saving.");
        }
    }

    private void loadModel() {
        JFileChooser fileChooser = new JFileChooser();

        // Definindo o diretório inicial
        fileChooser.setCurrentDirectory(new File("C:\\Users\\MarcelodeAlmeidaMaia\\Projetos\\SoftwarePredicaoFTIR\\Caquecia_Geral\\Caquecia_Geral"));

        // Abrindo o diálogo
        int result = fileChooser.showOpenDialog(null);

        // Verificando a escolha do usuário
        if (result == JFileChooser.APPROVE_OPTION) {
            File modelFile = fileChooser.getSelectedFile();
            System.out.println("Arquivo selecionado: " + modelFile.getAbsolutePath());
            config.setModelFile(modelFile.getAbsolutePath());
            this.refreshOutput("Model ok!");
        } else {
            System.out.println("Nenhum arquivo foi selecionado.");
        }
    }

    private void loadPatientFile() {
        JFileChooser fileChooser = new JFileChooser();

        // Definindo o diretório inicial
        fileChooser.setCurrentDirectory(new File("C:\\Users\\MarcelodeAlmeidaMaia\\Projetos\\SoftwarePredicaoFTIR\\Caquecia_Geral\\Caquecia_Geral"));

        // Abrindo o diálogo
        int result = fileChooser.showOpenDialog(null);

        // Verificando a escolha do usuário
        if (result == JFileChooser.APPROVE_OPTION) {
            File patientFile = fileChooser.getSelectedFile();
            System.out.println("Arquivo selecionado: " + patientFile.getAbsolutePath());
            config.setPatientFile(patientFile.getAbsolutePath());
            this.refreshOutput("Patient File ok!");
        } else {
            System.out.println("Nenhum arquivo foi selecionado.");
        }
    }

    public void predict() {
        try {
            // Prepare the command to run the Python script
//            String command = "python C:\\Users\\MarcelodeAlmeidaMaia\\Projetos\\SoftwarePredicaoFTIR\\Caquecia_Geral\\Caquecia_Geral\\PredictFromCSV.py " + config.getModelFile() + " " + config.getPatientFile();

        // Extract Python script from the JAR to a temporary location
        InputStream scriptStream = getClass().getResourceAsStream("/PredictFromCSV.py");
        if (scriptStream == null) {
            throw new FileNotFoundException("Script not found in JAR: /PredictFromCSV.py");
        }
        
        // Create a temporary file
        Path tempScript = Files.createTempFile("PredictFromCSV", ".py");
        tempScript.toFile().deleteOnExit(); // Delete temp file on exit

        // Write the script content to the temporary file
        try (OutputStream out = new FileOutputStream(tempScript.toFile())) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = scriptStream.read(buffer)) != -1) {
                out.write(buffer, 0, bytesRead);
            }
        }

        // Build the command
        String command = "python " + tempScript.toAbsolutePath() + " " + config.getModelFile() + " " + config.getPatientFile();

            
            // Execute the command
            Process process = Runtime.getRuntime().exec(command);
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            String line, prediction = "";
            while ((line = reader.readLine()) != null) {
                System.out.println(line); // Imprime cada linha de saída
                prediction += line + "\n";
            }

            // Lendo o erro, caso ocorra
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            while ((line = errorReader.readLine()) != null) {
                System.err.println("Erro: " + line);
                prediction += line + "\n";
            }

            int exitCode = process.waitFor(); // Aguarda a finalização do script
            System.out.println("Exit code: " + exitCode);

            // Display the prediction result
            this.refreshOutput(prediction);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void resizePaletteButton(JButton b) {
        int size = Math.min(b.getWidth(), b.getHeight());
        b.setSize(size, size);
        ImageIcon originalIcon = (ImageIcon) b.getIcon();
        if (originalIcon != null) {
            Image img = originalIcon.getImage();
            Image resizedImage = img.getScaledInstance(size - 10, size - 10, Image.SCALE_SMOOTH);
            b.setIcon(new ImageIcon(resizedImage));
        }
    }

    public String output() {
        String output;
        output = "Model File  : " + config.getModelFile() + "\n"
                + "Patient File: " + config.getPatientFile() + "\n";
        return output;
    }

    private void refreshOutput(String param) {
        jTextPane1.setText(output() + param);
    }

    private String help() {
        return "\n" +
                "1) Choose an Orange file model with extension .pkcls\n" +
                "2) Choose FTIR data for a patient in a .csv file\n" +
                "3) Click in Predict!";
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuHelpShow;
    private javax.swing.JMenuItem menuLoadModel;
    private javax.swing.JMenuItem menuLoadPatientFile;
    private javax.swing.JMenu menuPredict;
    private javax.swing.JMenuItem menuPredictRun;
    private javax.swing.JMenuItem menuSaveResult;
    // End of variables declaration//GEN-END:variables
}
